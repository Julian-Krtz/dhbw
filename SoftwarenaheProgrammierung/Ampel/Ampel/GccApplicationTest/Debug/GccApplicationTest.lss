
GccApplicationTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b4d  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b8  00000000  00000000  00000f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c3  00000000  00000000  00001721  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041c  00000000  00000000  00001ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000467  00000000  00000000  00001fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002427  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 42 01 	call	0x284	; 0x284 <main>
  78:	0c 94 8a 01 	jmp	0x314	; 0x314 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <changepin>:

int potenz(int basis, int exponent) {
	if (exponent == 0)
		return 1;
	return basis * potenz(basis, exponent-1);
}
  80:	21 e0       	ldi	r18, 0x01	; 1
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	06 2e       	mov	r0, r22
  86:	02 c0       	rjmp	.+4      	; 0x8c <changepin+0xc>
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	0a 94       	dec	r0
  8e:	e2 f7       	brpl	.-8      	; 0x88 <changepin+0x8>
  90:	20 95       	com	r18
  92:	fc 01       	movw	r30, r24
  94:	80 81       	ld	r24, Z
  96:	28 23       	and	r18, r24
  98:	ca 01       	movw	r24, r20
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <changepin+0x20>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <changepin+0x1c>
  a4:	82 2b       	or	r24, r18
  a6:	08 95       	ret

000000a8 <goGreen>:

void goGreen(struct ampel a[], int sizeOfA) {
  a8:	ef 92       	push	r14
  aa:	ff 92       	push	r15
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
	for (int index = 0; index < (sizeOfA / sizeof(struct ampel)); index ++)
  b4:	76 95       	lsr	r23
  b6:	67 95       	ror	r22
  b8:	76 95       	lsr	r23
  ba:	67 95       	ror	r22
  bc:	76 95       	lsr	r23
  be:	67 95       	ror	r22
  c0:	61 15       	cp	r22, r1
  c2:	71 05       	cpc	r23, r1
  c4:	09 f4       	brne	.+2      	; 0xc8 <goGreen+0x20>
  c6:	57 c0       	rjmp	.+174    	; 0x176 <goGreen+0xce>
  c8:	ec 01       	movw	r28, r24
  ca:	8c 01       	movw	r16, r24
  cc:	66 0f       	add	r22, r22
  ce:	77 1f       	adc	r23, r23
  d0:	66 0f       	add	r22, r22
  d2:	77 1f       	adc	r23, r23
  d4:	66 0f       	add	r22, r22
  d6:	77 1f       	adc	r23, r23
  d8:	7c 01       	movw	r14, r24
  da:	e6 0e       	add	r14, r22
  dc:	f7 1e       	adc	r15, r23
	{
		PORTC = changepin(a[index].port,a[index].rot, 1);
  de:	6c 81       	ldd	r22, Y+4	; 0x04
  e0:	7d 81       	ldd	r23, Y+5	; 0x05
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	8e 81       	ldd	r24, Y+6	; 0x06
  e8:	9f 81       	ldd	r25, Y+7	; 0x07
  ea:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
  ee:	88 b9       	out	0x08, r24	; 8
		PORTC = changepin(a[index].port,a[index].gelb, 1);
  f0:	6a 81       	ldd	r22, Y+2	; 0x02
  f2:	7b 81       	ldd	r23, Y+3	; 0x03
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	8e 81       	ldd	r24, Y+6	; 0x06
  fa:	9f 81       	ldd	r25, Y+7	; 0x07
  fc:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 100:	88 b9       	out	0x08, r24	; 8
		PORTC = changepin(a[index].port,a[index].gruen, 0);
 102:	68 81       	ld	r22, Y
 104:	79 81       	ldd	r23, Y+1	; 0x01
 106:	40 e0       	ldi	r20, 0x00	; 0
 108:	50 e0       	ldi	r21, 0x00	; 0
 10a:	8e 81       	ldd	r24, Y+6	; 0x06
 10c:	9f 81       	ldd	r25, Y+7	; 0x07
 10e:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 112:	88 b9       	out	0x08, r24	; 8
 114:	28 96       	adiw	r28, 0x08	; 8
		return 1;
	return basis * potenz(basis, exponent-1);
}

void goGreen(struct ampel a[], int sizeOfA) {
	for (int index = 0; index < (sizeOfA / sizeof(struct ampel)); index ++)
 116:	ce 15       	cp	r28, r14
 118:	df 05       	cpc	r29, r15
 11a:	09 f7       	brne	.-62     	; 0xde <goGreen+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	81 ee       	ldi	r24, 0xE1	; 225
 120:	94 e0       	ldi	r25, 0x04	; 4
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <goGreen+0x7a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <goGreen+0x84>
 12c:	00 00       	nop
		PORTC = changepin(a[index].port,a[index].gruen, 0);
	}
	_delay_ms(100);
	for (int index = 0; index < (sizeOfA / sizeof(struct ampel)); index ++)
	{
		PORTC = changepin(a[index].port,a[index].rot, 0);
 12e:	f8 01       	movw	r30, r16
 130:	64 81       	ldd	r22, Z+4	; 0x04
 132:	75 81       	ldd	r23, Z+5	; 0x05
 134:	40 e0       	ldi	r20, 0x00	; 0
 136:	50 e0       	ldi	r21, 0x00	; 0
 138:	86 81       	ldd	r24, Z+6	; 0x06
 13a:	97 81       	ldd	r25, Z+7	; 0x07
 13c:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 140:	88 b9       	out	0x08, r24	; 8
		PORTC = changepin(a[index].port,a[index].gelb, 0);
 142:	f8 01       	movw	r30, r16
 144:	62 81       	ldd	r22, Z+2	; 0x02
 146:	73 81       	ldd	r23, Z+3	; 0x03
 148:	40 e0       	ldi	r20, 0x00	; 0
 14a:	50 e0       	ldi	r21, 0x00	; 0
 14c:	86 81       	ldd	r24, Z+6	; 0x06
 14e:	97 81       	ldd	r25, Z+7	; 0x07
 150:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 154:	88 b9       	out	0x08, r24	; 8
		PORTC = changepin(a[index].port,a[index].gruen, 1);
 156:	f8 01       	movw	r30, r16
 158:	60 81       	ld	r22, Z
 15a:	71 81       	ldd	r23, Z+1	; 0x01
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	86 81       	ldd	r24, Z+6	; 0x06
 162:	97 81       	ldd	r25, Z+7	; 0x07
 164:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 168:	88 b9       	out	0x08, r24	; 8
 16a:	08 5f       	subi	r16, 0xF8	; 248
 16c:	1f 4f       	sbci	r17, 0xFF	; 255
		PORTC = changepin(a[index].port,a[index].rot, 1);
		PORTC = changepin(a[index].port,a[index].gelb, 1);
		PORTC = changepin(a[index].port,a[index].gruen, 0);
	}
	_delay_ms(100);
	for (int index = 0; index < (sizeOfA / sizeof(struct ampel)); index ++)
 16e:	0e 15       	cp	r16, r14
 170:	1f 05       	cpc	r17, r15
 172:	e9 f6       	brne	.-70     	; 0x12e <goGreen+0x86>
 174:	09 c0       	rjmp	.+18     	; 0x188 <goGreen+0xe0>
 176:	ff ef       	ldi	r31, 0xFF	; 255
 178:	21 ee       	ldi	r18, 0xE1	; 225
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	f1 50       	subi	r31, 0x01	; 1
 17e:	20 40       	sbci	r18, 0x00	; 0
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	e1 f7       	brne	.-8      	; 0x17c <goGreen+0xd4>
 184:	00 c0       	rjmp	.+0      	; 0x186 <goGreen+0xde>
 186:	00 00       	nop
	{
		PORTC = changepin(a[index].port,a[index].rot, 0);
		PORTC = changepin(a[index].port,a[index].gelb, 0);
		PORTC = changepin(a[index].port,a[index].gruen, 1);
	}
}
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	08 95       	ret

00000196 <goRed>:

void goRed(struct ampel a[], int sizeOfA) {
 196:	ef 92       	push	r14
 198:	ff 92       	push	r15
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
	for (int index = 0; index < (sizeOfA / sizeof(struct ampel)); index ++)
 1a2:	76 95       	lsr	r23
 1a4:	67 95       	ror	r22
 1a6:	76 95       	lsr	r23
 1a8:	67 95       	ror	r22
 1aa:	76 95       	lsr	r23
 1ac:	67 95       	ror	r22
 1ae:	61 15       	cp	r22, r1
 1b0:	71 05       	cpc	r23, r1
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <goRed+0x20>
 1b4:	57 c0       	rjmp	.+174    	; 0x264 <goRed+0xce>
 1b6:	ec 01       	movw	r28, r24
 1b8:	8c 01       	movw	r16, r24
 1ba:	66 0f       	add	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	66 0f       	add	r22, r22
 1c4:	77 1f       	adc	r23, r23
 1c6:	7c 01       	movw	r14, r24
 1c8:	e6 0e       	add	r14, r22
 1ca:	f7 1e       	adc	r15, r23
	{
		PORTC = changepin(a[index].port,a[index].rot, 0);
 1cc:	6c 81       	ldd	r22, Y+4	; 0x04
 1ce:	7d 81       	ldd	r23, Y+5	; 0x05
 1d0:	40 e0       	ldi	r20, 0x00	; 0
 1d2:	50 e0       	ldi	r21, 0x00	; 0
 1d4:	8e 81       	ldd	r24, Y+6	; 0x06
 1d6:	9f 81       	ldd	r25, Y+7	; 0x07
 1d8:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 1dc:	88 b9       	out	0x08, r24	; 8
		PORTC = changepin(a[index].port,a[index].gelb, 1);
 1de:	6a 81       	ldd	r22, Y+2	; 0x02
 1e0:	7b 81       	ldd	r23, Y+3	; 0x03
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	8e 81       	ldd	r24, Y+6	; 0x06
 1e8:	9f 81       	ldd	r25, Y+7	; 0x07
 1ea:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 1ee:	88 b9       	out	0x08, r24	; 8
		PORTC = changepin(a[index].port,a[index].gruen, 0);
 1f0:	68 81       	ld	r22, Y
 1f2:	79 81       	ldd	r23, Y+1	; 0x01
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	8e 81       	ldd	r24, Y+6	; 0x06
 1fa:	9f 81       	ldd	r25, Y+7	; 0x07
 1fc:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 200:	88 b9       	out	0x08, r24	; 8
 202:	28 96       	adiw	r28, 0x08	; 8
		PORTC = changepin(a[index].port,a[index].gruen, 1);
	}
}

void goRed(struct ampel a[], int sizeOfA) {
	for (int index = 0; index < (sizeOfA / sizeof(struct ampel)); index ++)
 204:	ce 15       	cp	r28, r14
 206:	df 05       	cpc	r29, r15
 208:	09 f7       	brne	.-62     	; 0x1cc <goRed+0x36>
 20a:	2f ef       	ldi	r18, 0xFF	; 255
 20c:	81 ee       	ldi	r24, 0xE1	; 225
 20e:	94 e0       	ldi	r25, 0x04	; 4
 210:	21 50       	subi	r18, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	e1 f7       	brne	.-8      	; 0x210 <goRed+0x7a>
 218:	00 c0       	rjmp	.+0      	; 0x21a <goRed+0x84>
 21a:	00 00       	nop
		PORTC = changepin(a[index].port,a[index].gruen, 0);
	}
	_delay_ms(100);
	for (int index = 0; index < (sizeOfA / sizeof(struct ampel)); index ++)
	{
		PORTC = changepin(a[index].port,a[index].rot, 1);
 21c:	f8 01       	movw	r30, r16
 21e:	64 81       	ldd	r22, Z+4	; 0x04
 220:	75 81       	ldd	r23, Z+5	; 0x05
 222:	41 e0       	ldi	r20, 0x01	; 1
 224:	50 e0       	ldi	r21, 0x00	; 0
 226:	86 81       	ldd	r24, Z+6	; 0x06
 228:	97 81       	ldd	r25, Z+7	; 0x07
 22a:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 22e:	88 b9       	out	0x08, r24	; 8
		PORTC = changepin(a[index].port,a[index].gelb, 0);
 230:	f8 01       	movw	r30, r16
 232:	62 81       	ldd	r22, Z+2	; 0x02
 234:	73 81       	ldd	r23, Z+3	; 0x03
 236:	40 e0       	ldi	r20, 0x00	; 0
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	86 81       	ldd	r24, Z+6	; 0x06
 23c:	97 81       	ldd	r25, Z+7	; 0x07
 23e:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 242:	88 b9       	out	0x08, r24	; 8
		PORTC = changepin(a[index].port,a[index].gruen, 0);
 244:	f8 01       	movw	r30, r16
 246:	60 81       	ld	r22, Z
 248:	71 81       	ldd	r23, Z+1	; 0x01
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	50 e0       	ldi	r21, 0x00	; 0
 24e:	86 81       	ldd	r24, Z+6	; 0x06
 250:	97 81       	ldd	r25, Z+7	; 0x07
 252:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 256:	88 b9       	out	0x08, r24	; 8
 258:	08 5f       	subi	r16, 0xF8	; 248
 25a:	1f 4f       	sbci	r17, 0xFF	; 255
		PORTC = changepin(a[index].port,a[index].rot, 0);
		PORTC = changepin(a[index].port,a[index].gelb, 1);
		PORTC = changepin(a[index].port,a[index].gruen, 0);
	}
	_delay_ms(100);
	for (int index = 0; index < (sizeOfA / sizeof(struct ampel)); index ++)
 25c:	0e 15       	cp	r16, r14
 25e:	1f 05       	cpc	r17, r15
 260:	e9 f6       	brne	.-70     	; 0x21c <goRed+0x86>
 262:	09 c0       	rjmp	.+18     	; 0x276 <goRed+0xe0>
 264:	ff ef       	ldi	r31, 0xFF	; 255
 266:	21 ee       	ldi	r18, 0xE1	; 225
 268:	84 e0       	ldi	r24, 0x04	; 4
 26a:	f1 50       	subi	r31, 0x01	; 1
 26c:	20 40       	sbci	r18, 0x00	; 0
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <goRed+0xd4>
 272:	00 c0       	rjmp	.+0      	; 0x274 <goRed+0xde>
 274:	00 00       	nop
	{
		PORTC = changepin(a[index].port,a[index].rot, 1);
		PORTC = changepin(a[index].port,a[index].gelb, 0);
		PORTC = changepin(a[index].port,a[index].gruen, 0);
	}
}
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	1f 91       	pop	r17
 27c:	0f 91       	pop	r16
 27e:	ff 90       	pop	r15
 280:	ef 90       	pop	r14
 282:	08 95       	ret

00000284 <main>:

int main(void)
{
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	60 97       	sbiw	r28, 0x10	; 16
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
	ampel3.gruen = 0;
	ampel3.gelb = 1;
	ampel3.rot = 2;
	ampel3.port = &PORTB;
	
	struct ampel ampeln[] = {ampel1, ampel2, /*ampel3*/};
 298:	1a 82       	std	Y+2, r1	; 0x02
 29a:	19 82       	std	Y+1, r1	; 0x01
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	9c 83       	std	Y+4, r25	; 0x04
 2a2:	8b 83       	std	Y+3, r24	; 0x03
 2a4:	82 e0       	ldi	r24, 0x02	; 2
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	9e 83       	std	Y+6, r25	; 0x06
 2aa:	8d 83       	std	Y+5, r24	; 0x05
 2ac:	88 e2       	ldi	r24, 0x28	; 40
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	98 87       	std	Y+8, r25	; 0x08
 2b2:	8f 83       	std	Y+7, r24	; 0x07
 2b4:	23 e0       	ldi	r18, 0x03	; 3
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	3a 87       	std	Y+10, r19	; 0x0a
 2ba:	29 87       	std	Y+9, r18	; 0x09
 2bc:	24 e0       	ldi	r18, 0x04	; 4
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	3c 87       	std	Y+12, r19	; 0x0c
 2c2:	2b 87       	std	Y+11, r18	; 0x0b
 2c4:	25 e0       	ldi	r18, 0x05	; 5
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	3e 87       	std	Y+14, r19	; 0x0e
 2ca:	2d 87       	std	Y+13, r18	; 0x0d
 2cc:	98 8b       	std	Y+16, r25	; 0x10
 2ce:	8f 87       	std	Y+15, r24	; 0x0f
	
	DDRC = 0xFF;
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 2d4:	18 b8       	out	0x08, r1	; 8
	PORTB=0xFF;
	DDRC=0xFF;
	PORTC=0xFF; */
	while (1)
	{
		goGreen(ampeln, sizeof(ampeln));
 2d6:	60 e1       	ldi	r22, 0x10	; 16
 2d8:	70 e0       	ldi	r23, 0x00	; 0
 2da:	ce 01       	movw	r24, r28
 2dc:	01 96       	adiw	r24, 0x01	; 1
 2de:	0e 94 54 00 	call	0xa8	; 0xa8 <goGreen>
 2e2:	2f ef       	ldi	r18, 0xFF	; 255
 2e4:	83 ed       	ldi	r24, 0xD3	; 211
 2e6:	90 e3       	ldi	r25, 0x30	; 48
 2e8:	21 50       	subi	r18, 0x01	; 1
 2ea:	80 40       	sbci	r24, 0x00	; 0
 2ec:	90 40       	sbci	r25, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0x64>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x6e>
 2f2:	00 00       	nop
		_delay_ms(1000);
		goRed(ampeln, sizeof(ampeln));
 2f4:	60 e1       	ldi	r22, 0x10	; 16
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	ce 01       	movw	r24, r28
 2fa:	01 96       	adiw	r24, 0x01	; 1
 2fc:	0e 94 cb 00 	call	0x196	; 0x196 <goRed>
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	83 ed       	ldi	r24, 0xD3	; 211
 304:	90 e3       	ldi	r25, 0x30	; 48
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x82>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x8c>
 310:	00 00       	nop
 312:	e1 cf       	rjmp	.-62     	; 0x2d6 <main+0x52>

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
