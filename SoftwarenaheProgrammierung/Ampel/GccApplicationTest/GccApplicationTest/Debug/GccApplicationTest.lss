
GccApplicationTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002c8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b3b  00000000  00000000  000003cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077d  00000000  00000000  00000f07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000359  00000000  00000000  00001684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f0  00000000  00000000  000019e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f0  00000000  00000000  00001ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e7  00000000  00000000  00001ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000023a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 20 01 	call	0x240	; 0x240 <main>
  78:	0c 94 62 01 	jmp	0x2c4	; 0x2c4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <changepin>:

int potenz(int basis, int exponent) {
	if (exponent == 0)
		return 1;
	return basis * potenz(basis, exponent-1);
}
  80:	21 e0       	ldi	r18, 0x01	; 1
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	06 2e       	mov	r0, r22
  86:	02 c0       	rjmp	.+4      	; 0x8c <changepin+0xc>
  88:	22 0f       	add	r18, r18
  8a:	33 1f       	adc	r19, r19
  8c:	0a 94       	dec	r0
  8e:	e2 f7       	brpl	.-8      	; 0x88 <changepin+0x8>
  90:	20 95       	com	r18
  92:	fc 01       	movw	r30, r24
  94:	80 81       	ld	r24, Z
  96:	28 23       	and	r18, r24
  98:	ca 01       	movw	r24, r20
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <changepin+0x20>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <changepin+0x1c>
  a4:	82 2b       	or	r24, r18
  a6:	08 95       	ret

000000a8 <goGreen>:

void goGreen(struct ampel a) {
  a8:	af 92       	push	r10
  aa:	bf 92       	push	r11
  ac:	cf 92       	push	r12
  ae:	df 92       	push	r13
  b0:	ef 92       	push	r14
  b2:	ff 92       	push	r15
  b4:	0f 93       	push	r16
  b6:	1f 93       	push	r17
  b8:	cf 93       	push	r28
  ba:	df 93       	push	r29
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	28 97       	sbiw	r28, 0x08	; 8
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	29 83       	std	Y+1, r18	; 0x01
  ce:	3a 83       	std	Y+2, r19	; 0x02
  d0:	4b 83       	std	Y+3, r20	; 0x03
  d2:	5c 83       	std	Y+4, r21	; 0x04
  d4:	6d 83       	std	Y+5, r22	; 0x05
  d6:	7e 83       	std	Y+6, r23	; 0x06
  d8:	8f 83       	std	Y+7, r24	; 0x07
  da:	98 87       	std	Y+8, r25	; 0x08
  dc:	e9 80       	ldd	r14, Y+1	; 0x01
  de:	fa 80       	ldd	r15, Y+2	; 0x02
  e0:	cb 80       	ldd	r12, Y+3	; 0x03
  e2:	dc 80       	ldd	r13, Y+4	; 0x04
  e4:	ad 80       	ldd	r10, Y+5	; 0x05
  e6:	be 80       	ldd	r11, Y+6	; 0x06
  e8:	0f 81       	ldd	r16, Y+7	; 0x07
  ea:	18 85       	ldd	r17, Y+8	; 0x08
	PORTC = changepin(a.port,a.rot, 1);
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	50 e0       	ldi	r21, 0x00	; 0
  f0:	b5 01       	movw	r22, r10
  f2:	c8 01       	movw	r24, r16
  f4:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
  f8:	88 b9       	out	0x08, r24	; 8
	PORTC = changepin(a.port,a.gelb, 1);
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	50 e0       	ldi	r21, 0x00	; 0
  fe:	b6 01       	movw	r22, r12
 100:	c8 01       	movw	r24, r16
 102:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 106:	88 b9       	out	0x08, r24	; 8
	PORTC = changepin(a.port,a.gruen, 0);		
 108:	40 e0       	ldi	r20, 0x00	; 0
 10a:	50 e0       	ldi	r21, 0x00	; 0
 10c:	b7 01       	movw	r22, r14
 10e:	c8 01       	movw	r24, r16
 110:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 114:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	87 ea       	ldi	r24, 0xA7	; 167
 11a:	91 e6       	ldi	r25, 0x61	; 97
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <goGreen+0x74>
 124:	00 c0       	rjmp	.+0      	; 0x126 <goGreen+0x7e>
 126:	00 00       	nop
	_delay_ms(2000);
	PORTC = changepin(a.port,a.rot, 0);
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	b5 01       	movw	r22, r10
 12e:	c8 01       	movw	r24, r16
 130:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 134:	88 b9       	out	0x08, r24	; 8
	PORTC = changepin(a.port,a.gelb, 0);
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	b6 01       	movw	r22, r12
 13c:	c8 01       	movw	r24, r16
 13e:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 142:	88 b9       	out	0x08, r24	; 8
	PORTC = changepin(a.port,a.gruen, 1);
 144:	41 e0       	ldi	r20, 0x01	; 1
 146:	50 e0       	ldi	r21, 0x00	; 0
 148:	b7 01       	movw	r22, r14
 14a:	c8 01       	movw	r24, r16
 14c:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 150:	88 b9       	out	0x08, r24	; 8
}
 152:	28 96       	adiw	r28, 0x08	; 8
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	ff 90       	pop	r15
 168:	ef 90       	pop	r14
 16a:	df 90       	pop	r13
 16c:	cf 90       	pop	r12
 16e:	bf 90       	pop	r11
 170:	af 90       	pop	r10
 172:	08 95       	ret

00000174 <goRed>:

void goRed(struct ampel a) {
 174:	af 92       	push	r10
 176:	bf 92       	push	r11
 178:	cf 92       	push	r12
 17a:	df 92       	push	r13
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0f 93       	push	r16
 182:	1f 93       	push	r17
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
 18c:	28 97       	sbiw	r28, 0x08	; 8
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	f8 94       	cli
 192:	de bf       	out	0x3e, r29	; 62
 194:	0f be       	out	0x3f, r0	; 63
 196:	cd bf       	out	0x3d, r28	; 61
 198:	29 83       	std	Y+1, r18	; 0x01
 19a:	3a 83       	std	Y+2, r19	; 0x02
 19c:	4b 83       	std	Y+3, r20	; 0x03
 19e:	5c 83       	std	Y+4, r21	; 0x04
 1a0:	6d 83       	std	Y+5, r22	; 0x05
 1a2:	7e 83       	std	Y+6, r23	; 0x06
 1a4:	8f 83       	std	Y+7, r24	; 0x07
 1a6:	98 87       	std	Y+8, r25	; 0x08
 1a8:	e9 80       	ldd	r14, Y+1	; 0x01
 1aa:	fa 80       	ldd	r15, Y+2	; 0x02
 1ac:	cb 80       	ldd	r12, Y+3	; 0x03
 1ae:	dc 80       	ldd	r13, Y+4	; 0x04
 1b0:	ad 80       	ldd	r10, Y+5	; 0x05
 1b2:	be 80       	ldd	r11, Y+6	; 0x06
 1b4:	0f 81       	ldd	r16, Y+7	; 0x07
 1b6:	18 85       	ldd	r17, Y+8	; 0x08
	PORTC = changepin(a.port,a.rot, 0);
 1b8:	40 e0       	ldi	r20, 0x00	; 0
 1ba:	50 e0       	ldi	r21, 0x00	; 0
 1bc:	b5 01       	movw	r22, r10
 1be:	c8 01       	movw	r24, r16
 1c0:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 1c4:	88 b9       	out	0x08, r24	; 8
	PORTC = changepin(a.port,a.gelb, 1);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	b6 01       	movw	r22, r12
 1cc:	c8 01       	movw	r24, r16
 1ce:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 1d2:	88 b9       	out	0x08, r24	; 8
	PORTC = changepin(a.port,a.gruen, 0);
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	b7 01       	movw	r22, r14
 1da:	c8 01       	movw	r24, r16
 1dc:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 1e0:	88 b9       	out	0x08, r24	; 8
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	87 ea       	ldi	r24, 0xA7	; 167
 1e6:	91 e6       	ldi	r25, 0x61	; 97
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <goRed+0x74>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <goRed+0x7e>
 1f2:	00 00       	nop
	_delay_ms(2000);
	PORTC = changepin(a.port,a.rot, 1);
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	b5 01       	movw	r22, r10
 1fa:	c8 01       	movw	r24, r16
 1fc:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 200:	88 b9       	out	0x08, r24	; 8
	PORTC = changepin(a.port,a.gelb, 0);
 202:	40 e0       	ldi	r20, 0x00	; 0
 204:	50 e0       	ldi	r21, 0x00	; 0
 206:	b6 01       	movw	r22, r12
 208:	c8 01       	movw	r24, r16
 20a:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 20e:	88 b9       	out	0x08, r24	; 8
	PORTC = changepin(a.port,a.gruen, 0);
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	b7 01       	movw	r22, r14
 216:	c8 01       	movw	r24, r16
 218:	0e 94 40 00 	call	0x80	; 0x80 <changepin>
 21c:	88 b9       	out	0x08, r24	; 8
}
 21e:	28 96       	adiw	r28, 0x08	; 8
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	de bf       	out	0x3e, r29	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	cd bf       	out	0x3d, r28	; 61
 22a:	df 91       	pop	r29
 22c:	cf 91       	pop	r28
 22e:	1f 91       	pop	r17
 230:	0f 91       	pop	r16
 232:	ff 90       	pop	r15
 234:	ef 90       	pop	r14
 236:	df 90       	pop	r13
 238:	cf 90       	pop	r12
 23a:	bf 90       	pop	r11
 23c:	af 90       	pop	r10
 23e:	08 95       	ret

00000240 <main>:

int main(void)
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	cd b7       	in	r28, 0x3d	; 61
 246:	de b7       	in	r29, 0x3e	; 62
 248:	28 97       	sbiw	r28, 0x08	; 8
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	f8 94       	cli
 24e:	de bf       	out	0x3e, r29	; 62
 250:	0f be       	out	0x3f, r0	; 63
 252:	cd bf       	out	0x3d, r28	; 61
	struct ampel ampel1;
	ampel1.gruen = 0;
 254:	1a 82       	std	Y+2, r1	; 0x02
 256:	19 82       	std	Y+1, r1	; 0x01
	ampel1.gelb = 1;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	9c 83       	std	Y+4, r25	; 0x04
 25e:	8b 83       	std	Y+3, r24	; 0x03
	ampel1.rot = 2;
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	9e 83       	std	Y+6, r25	; 0x06
 266:	8d 83       	std	Y+5, r24	; 0x05
	ampel1.port = &PORTC;
 268:	88 e2       	ldi	r24, 0x28	; 40
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	98 87       	std	Y+8, r25	; 0x08
 26e:	8f 83       	std	Y+7, r24	; 0x07
	
	DDRC = 0xFF;
 270:	8f ef       	ldi	r24, 0xFF	; 255
 272:	87 b9       	out	0x07, r24	; 7
	PORTC = 0x00;
 274:	18 b8       	out	0x08, r1	; 8
	PORTB=0xFF;
	DDRC=0xFF;
	PORTC=0xFF; */
	while (1)
	{
		goGreen(ampel1);
 276:	29 81       	ldd	r18, Y+1	; 0x01
 278:	3a 81       	ldd	r19, Y+2	; 0x02
 27a:	4b 81       	ldd	r20, Y+3	; 0x03
 27c:	5c 81       	ldd	r21, Y+4	; 0x04
 27e:	6d 81       	ldd	r22, Y+5	; 0x05
 280:	7e 81       	ldd	r23, Y+6	; 0x06
 282:	8f 81       	ldd	r24, Y+7	; 0x07
 284:	98 85       	ldd	r25, Y+8	; 0x08
 286:	0e 94 54 00 	call	0xa8	; 0xa8 <goGreen>
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	87 ea       	ldi	r24, 0xA7	; 167
 28e:	91 e6       	ldi	r25, 0x61	; 97
 290:	21 50       	subi	r18, 0x01	; 1
 292:	80 40       	sbci	r24, 0x00	; 0
 294:	90 40       	sbci	r25, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x50>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x5a>
 29a:	00 00       	nop
		_delay_ms(2000);
		goRed(ampel1);
 29c:	29 81       	ldd	r18, Y+1	; 0x01
 29e:	3a 81       	ldd	r19, Y+2	; 0x02
 2a0:	4b 81       	ldd	r20, Y+3	; 0x03
 2a2:	5c 81       	ldd	r21, Y+4	; 0x04
 2a4:	6d 81       	ldd	r22, Y+5	; 0x05
 2a6:	7e 81       	ldd	r23, Y+6	; 0x06
 2a8:	8f 81       	ldd	r24, Y+7	; 0x07
 2aa:	98 85       	ldd	r25, Y+8	; 0x08
 2ac:	0e 94 ba 00 	call	0x174	; 0x174 <goRed>
 2b0:	2f ef       	ldi	r18, 0xFF	; 255
 2b2:	87 ea       	ldi	r24, 0xA7	; 167
 2b4:	91 e6       	ldi	r25, 0x61	; 97
 2b6:	21 50       	subi	r18, 0x01	; 1
 2b8:	80 40       	sbci	r24, 0x00	; 0
 2ba:	90 40       	sbci	r25, 0x00	; 0
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <main+0x76>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <main+0x80>
 2c0:	00 00       	nop
 2c2:	d9 cf       	rjmp	.-78     	; 0x276 <main+0x36>

000002c4 <_exit>:
 2c4:	f8 94       	cli

000002c6 <__stop_program>:
 2c6:	ff cf       	rjmp	.-2      	; 0x2c6 <__stop_program>
